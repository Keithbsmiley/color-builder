#!/usr/bin/env ruby
# Color Builder (https://github.com/Keithbsmiley/color-builder)

require "securerandom"
require "yaml"
require "open-uri"
require "erb"
require "base64"

class Theme
  BASE_PATH = File.dirname(__FILE__)

  attr_accessor :template

  def initialize
    @scheme_dir = File.join(BASE_PATH, "schemes")
    @template_dir = File.join(BASE_PATH, "templates")
    @output_dir = File.join(BASE_PATH, "output")
  end

  def build(scheme_file)
    if scheme_file then
      build_single_scheme(scheme_file)
    else
      build_all_schemes
    end
  end

  def build_all_schemes
    scheme_files = read_scheme_dir

    scheme_files.each do |scheme_file|
      build_single_scheme(scheme_file)
    end
  end

  def build_single_scheme(scheme_file)
    puts scheme_file
    scheme_data = read_scheme_file(scheme_file)
    populate_template_variables(scheme_data)
    create_output_files
  end

  def read_scheme_file(scheme_file)
    YAML.load open(scheme_file)
  rescue StandardError
    abort(read_error_message(scheme_file))
  end

  def read_scheme_dir
    Dir.glob(File.join(@scheme_dir, '**', '*.yml'))
  rescue StandardError
    abort(read_error_message(scheme_dir))
  end

  def read_template_dir
    Dir.glob(File.join(@template_dir, '**', '*.erb'))
  rescue StandardError
    abort(read_error_message(@template_dir))
  end

  def read_template_file(template_file)
    File.read(template_file)
  rescue StandardError
    abort(read_error_message(template_file))
  end

  def populate_template_variables(scheme_data)
    # Define ERB vars
    @scheme = scheme_data["scheme"]
    @author = scheme_data["author"]
    @slug = slug(scheme_data["scheme"])

    # Define ERB color vars
    @colors = {}
    [
      "base0", "base00", "base01", "base02", "base03", "base03", "base1",
      "base2", "base3", "blue", "cyan", "green", "magenta", "orange", "red",
      "violet", "yellow"
    ].each do |key|
      hex = scheme_data[key]
      if hex.start_with?('#')
        abort("Scheme file's colors must not start with a '#'")
      end

      @colors[key] = {
        "hex" => hex,
        "hexbgr" => to_hex_bgr(hex),
        "dhex" => to_dhex(hex),
        "rgb" => to_rgb(hex),
        "srgb" => to_srgb(hex)
      }
    end
  end

  def create_output_files
    # Read each
    read_template_dir.each do |template_file|
      puts "  - " + template_file # Show which file we are parsing

      # Grab the results of the parsed ERB file
      contents = parse_template_file(template_file)

      write_output_file(template_file, contents)
    end
  end

  def parse_template_file(template_file)
    # Define ERB vars
    @uuid = SecureRandom.uuid

    template_contents = read_template_file(template_file)
    parsed = ERB.new(template_contents)

    return parsed.result(binding)
  end

  def write_output_file(template_file, contents)
    dir_name = File.basename(File.dirname(template_file))
    file_name = File.basename(template_file, ".erb")
    scheme_name = slug(@scheme)

    output_dir = File.join(@output_dir, dir_name)
    make_dir(output_dir)

    # If the filename starts with a dash, we use the dash to separate
    delimiter = file_name.start_with?("-") ? "" : "."

    output_filename = File.join(output_dir,
                                "#{scheme_name}#{delimiter}#{file_name}")
    output_file = File.open(output_filename, "w")
    output_file.write(contents)
    output_file.close
  end

  def make_dir(name)
    if FileTest::directory?(name)
      return
    end
    Dir::mkdir(name)
  end

  def slug(string)
    string.downcase.strip.gsub(' ', '.').gsub(/[^\w-]/, '')
  end

  def to_hex_bgr(hex)
    hex.scan(/../).reverse.join
  end

  def to_dhex(hex)
    hex.scan(/../).map {|color| color + color}.join
  end

  def to_rgb(hex)
    hex.scan(/../).map {|color| color.to_i(16)}
  end

  def to_srgb(hex)
    hex.scan(/../).map {|color| color.to_i(16).to_f / 255 }
  end

  def split_by_slash(hex)
    hex.scan(/.{1,2}/).join('/')
  end

  def read_error_message(file)
    "Error reading #{file}"
  end
end

help_message = <<-EOF
Color Builder v0.1
https://github.com/Keithbsmiley/color-builder

usage: build               build all schemes
   or: build scheme.yml    build specified scheme
EOF

case ARGV[0]
  when "-h", "--help"
      puts help_message
  else
    Theme.new.build(ARGV[0])
end
